GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2007, 2008 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to emacs-pretest-bug@gnu.org.
If possible, use M-x report-emacs-bug.

This file is about changes in Emacs version 23.

See files NEWS.22, NEWS.21, NEWS.20, NEWS.19, NEWS.18, and NEWS.1-17
for changes in older Emacs versions.

You can narrow news to a specific version by calling `view-emacs-news'
with a prefix argument or by typing C-u C-h C-n.

Temporary note:
 +++ indicates that the appropriate manual has already been updated.
 --- means no change in the manuals is called for.
When you add a new item, please add it without either +++ or ---
so we will look at it and add it to the manual.


* About external Lisp packages


* Installation Changes in Emacs 23.1

** The default X toolkit is now Gtk+, rather than Lucid.
The configure option `--with-gtk' has been removed.  Gtk is now the
default toolkit, but you can use --with-x-toolkit=gtk if necessary.

** New font code.
Fonts are handled by new code capable of dealing with multiple font
backends.  This requires the freetype and fontconfig libraries

*** Emacs now accepts font names supplied in the fontconfig format
(e.g. "monospace-12:bold") and GTK format (e.g. "Monospace Bold 12").

*** Added support for local fonts (fonts installed on the machine
where Emacs is running).

*** Added support for the Xft library for antialiasing.

*** Added support for the otf library for complex text layout by
OpenType fonts.

*** Added support for the m17n library for text shaping.

** Changes to image support

*** configure now checks for libgif before libungif when searching for
a GIF library.

*** Emacs now supports the SVG image format through librsvg2.

** The Mac Carbon port is no longer supported.
Instead, use... [FIXME what?]

** The new configuration option "--with-dbus" enables D-Bus language
bindings for Emacs.

** Support for many obsolete platforms has been removed.
See the list at the end of etc/MACHINES for details.

*** Support for systems without alloca has been removed.

*** Support for Sun windows has been removed.

** The `emacstool' utility has been removed.

** The configure options `--with-gcc', `--without-gcc' have been removed.
Configure will use gcc by default.  Set the CC environment variable if
you need control over which C compiler is used.

** The refcards are now shipped as PDF files.

** Emacs 23 comes with a new set of default icons.
Various resolutions are available as etc/images/icons/hicolor/*/apps/emacs.png.
The Emacs 22 icon is available as `emacs22.png' in the same location.

* Changes in Emacs 23.1

** Improved X Window System support

*** Emacs now supports using both X displays and ttys in one session.
With an Emacs server active (M-x server-start), `emacsclient -t'
creates a tty frame connected to the running emacs server.  You can
use any number of different ttys.  `emacsclient -c' creates a new X11
frame on the current $DISPLAY (or a tty frame if $DISPLAY is not set).

You can test for the presence of this feature in your Lisp code by
testing for the `multi-tty' feature.

**** Emacsclient can now open new terminal frames.
Now, the default behavior is to open a new Emacs frame by default.
Use the -c option to get the old behavior of opening files in the
currently selected Emacs frame.

*** The new command close-display-connection closes a connection to a
remote display.

*** Emacs now supports the XEmbed specification.
You can embed Emacs in another application on X11.  The new command line
option --parent-id is used to pass the parent window id to Emacs.  See
http://standards.freedesktop.org/xembed-spec/xembed-spec-latest.html
for details about XEmbed.

*** Emacs can now set the frame opacity.
The opacity of a frame can be controlled by setting the `alpha' frame
parameter.  This only takes effect on a compositing window manager for
the X Window System, such as Compiz, Beryl and Compiz Fusion.

The alpha parameter should be an integer between 0 (transparent) and
100 (opaque), or a float number between 0.0 and 1.0.  It can also be a
cons cell (ACTIVE . INACTIVE), where ACTIVE is the opacity of an
active frame and INACTIVE is the opactity of non-active frames.

The variable `frame-alpha-lower-limit' defines a lower bound for the
opacity; the default is 20.

** Internationalization changes

*** The Emacs character set is now a superset of Unicode.
(It has about four times the code space, which should be plenty).

The internal encoding used for buffers and strings is now
Unicode-based and called `utf-8-emacs'.  This encoding is backwards
compatible with Unicode's UTF-8 encoding.  The internal encoding
previously used by Emacs, `emacs-mule', is still available.

During byte-compilation, Emacs 23 uses `utf-8-emacs' to write files.
As a result, byte-compiled files containing non-ASCII characters can't
be read by earlier versions of Emacs.  Files compiled by Emacs 20, 21,
or 22 are loaded correctly as emacs-mule (whether or not they contain
multibyte characters).  This takes somewhat more time, so it may be
worth recompiling existing .elc files which don't need to be shared
with older Emacsen.

*** There are new coding systems/aliases; see M-x list-coding-systems.

*** There is a new charset implementation with many new charsets.
See M-x list-character-sets.  New charsets can be defined conveniently
as tables of unicodes.

**** The dimension of a charset is now 1, 2, 3, or 4, and the size of
each dimension is no longer limited to 94 or 96.

**** A dynamic charset priority list is used to infer the charset of
characters for display.

*** There are new language environments for Chinese-GBK,
Chinese-GB18030, Khmer, Bengali, Punjabi, Gujarati, Oriya, Telugu,
Sinhala, and TaiViet.

*** The minor modes unify-8859-on-encoding-mode and
unify-8859-on-decoding-mode are obsolete.

** Emacs now supports serial port access on GNU/Linux, Unix, and
Windows.  `serial-term' starts an interactive terminal,
`make-serial-process' and `serial-process-configure' provide a Lisp
interface.  The serial port can be configured at runtime with the
mode-line mouse menu.

** Menu Bar changes

*** In the Options menu, the "Set Default Font" item applies the
selected font to the `default' face on all frames, not just the
current frame.  Furthermore, if Emacs is compiled with both GTK and
Fontconfig support, the "Set Default Font" item uses the GTK font
selection dialog instead of an Emacs pop-up menu.

*** The font setting chosen by "Set Default Font" is saved if the
"Save Options" item is used.

*** The Tools menu contains a new Encryption/Decryption submenu.
This contains commands provided by EasyPG, the newly-included
interface to GnuPG (see New Modes and Packages).

*** The Options menu contains a new entry to turn on Longlines mode.

** Mode-line changes

*** The mode-line displays a `@', instead of `-', if the
default-directory for the current buffer is on a remote machine.

*** The mode-line displays a mode menu when mouse-1 is clicked on a
minor mode, in the same way as it already did for major modes.

*** The `mode-line-emphasis' face is used to highlight certain
mode-line information (e.g. waiting for a VC command to finish).

** Directory-local variables can now be defined.
By default, Emacs looks in .dir-settings.el for directory-local
variables.  For more information, see `set-directory-project' and
`define-project-bindings'.


* Startup Changes in Emacs 23.1

** The option `inhibit-startup-screen' (with aliases to old names
`inhibit-splash-screen' and `inhibit-startup-message') doesn't inhibit
display of the initial message in the *scratch* buffer.  If you don't
want to display the initial message in the *scratch* buffer at startup,
you can set the option `initial-scratch-message' to nil.

** New user option `initial-buffer-choice' specifies what to display
after starting Emacs: startup screen, *scratch* buffer, visiting a
file or directory.

** New alias `argv' for `command-line-args-left'
This is a convenience alias, so that one can write `(pop argv)'
inside of --eval command line arguments in order to access
following arguments.

** The abbrev file is no longer read at startup in batch mode.

* Incompatible Editing Changes in Emacs 23.1

+++
** In Dired-x, all command guesses for ! are now added to the default
list accessible by M-n instead of pushing all guesses temporarily into
the history list.

** The following input methods were removed in Emacs 22.2, but this was
not advertised: danish-alt-postfix, esperanto-alt-postfix,
finnish-alt-postfix, german-alt-postfix, icelandic-alt-postfix,
norwegian-alt-postfix, scandinavian-alt-postfix, spanish-alt-postfix,
and swedish-alt-postfix.  Use the versions without "alt-", which are
identical.


* Editing Changes in Emacs 23.1

** C-x C-c now invokes `save-buffers-kill-terminal', and C-z now
invokes `suspend-frame'.  This change is for compatibility with the
new multi-tty support (see `Improved X Window System support' above).

** Mark changes
+++
*** Transient Mark mode is now on by default.
+++
*** mark-even-if-inactive now defaults to t
+++
*** When Transient Mark mode is on, C-SPC C-SPC pushes a mark without
activating it.
+++
*** When Transient Mark mode is on, M-q now fills the region if the
region is active.  Otherwise, it fills the current paragraph.
+++
*** When Transient Mark mode is on, M-$ now checks spelling of the
region if the region is active.  Otherwise, it checks spelling of the
word at point.
*** When Transient Mark mode is on, TAB now indents the region if the
region is active.
*** `use-empty-active-region' controls whether an empty active region
in Transient Mark mode should make commands operate on that empty
region.

** Temporarily active regions
+++
*** The new variable shift-select-mode, non-nil by default, controls
shift-selection.  When Shift Select mode is on, shift-translated
motion keys (e.g. S-left and S-down) activate and extend a temporary
region, similar to mouse-selection.
+++
*** Temporarily active regions, created using shift-selection or
mouse-selection, are not necessarily deactivated in the next command.
They are only deactivated after point motion commands that are not
shift-translated, or after commands that would ordinarily deactivate
the mark in Transient Mark mode (e.g., any command that modifies the
buffer).

** Minibuffer changes

*** Operations like C-x b and C-x C-f, which use switch-to-buffer, do
not fail any more when used in a minibuffer or a dedicated window.
Instead, they fallback on using pop-to-buffer, which will use some
other window.

*** When M-n in the minibuffer reaches the end of the list of defaults,
it adds the completion list to the end, so next M-n continues putting
completion items to the minibuffer.  The same principle applies to
incremental search commands as well: C-s or C-M-s starts searching
the default values and after the end of defaults they continue
searching minibuffer completion items.

*** Minibuffer input of shell commands now comes with completion.

*** In the `C-x d' (Dired) prompt, typing M-n gives the visited file
name of the current buffer.

*** In the M-! (shell-command) prompt, M-n provides some default commands.
These are guessed using the file extension of the current file, based
on the file-handlers specified in the operating system's `mailcap'
file.  The ! command in Dired (dired-do-shell-command) works
similarly, using the file displayed on the current line.

*** A list of regexp default values is available via M-n for `occur',
`keep-lines', `flush-lines' and `how-many'.  This list includes the active
region in transient-mark-mode, the word under the cursor, the last isearch
regexp, the last isearch string and the last replacement regexp.

*** isearch started in the minibuffer searches in the minibuffer history.
Reverse isearch commands (C-r, C-M-r) search in previous minibuffer
history elements, and forward isearch commands (C-s, C-M-s) search in
next history elements.  When the reverse search reaches the first history
element, it wraps to the last history element, and the forward search
wraps to the first history element.  When the search is terminated, the
history element containing the search string becomes the current.

** Face changes

*** S-down-mouse-1 now pops up a menu for changing the font and text
size of the default face in the current buffer.  The face is changed
via face remapping (see below).

*** FIXME face-remap

** Primary selection changes

*** If `select-active-regions' is t, setting the mark automatically
makes the new region into the primary selection (for interaction with
other window applications).  If you enable this, you might want to
bind `mouse-yank-primary' to Mouse-2.

*** You can disable kill ring commands from accessing the primary
selection by setting `x-select-enable-primary' to nil.

** Completion changes

*** `completion-styles' can be customized to choose your favorite
completion style.

*** The default completion styles include a form of partial-completion.

*** The new command `minibuffer-force-complete' chooses one of the
possible completions, rather than stopping at the common prefix.

*** `completion-auto-help' can be set to `lazy' to list the
completions only if you repeat the completion.  This was already
supported in `partial-completion-mode'.

** Continuation lines can be wrapped at word boundaries
(word-wrapping) instead of the right window edge.  The new per-buffer
variable `word-wrap', if non-nil turns on word-wrapping.  Word
wrapping does not take place if continuation lines are not shown,
e.g. if truncate-lines is non-nil.

** Window management changes

*** truncate-partial-width-windows now accepts integer values, which
specify a minimum window width for partial-width windows, below which
lines are truncated.  The default has been changed to 30.

*** The new command balance-windows-area balances windows both
vertically and horizontally.

** Miscellaneous changes:

*** New keymap `search-map' bound to `M-s' provides global bindings
for search related commands: `M-s o' for `occur', `M-s h r' for
`highlight-regexp' and other hi-lock commands on the `M-s h' prefix.

*** C-l is bound to the new command recenter-top-bottom, rather than recenter.
This moves the current line to window center, top and bottom on
successive invokations.

*** scroll-preserve-screen-position also preserves the column position.

*** If `yank-pop-change-selection' is t, rotating the kill ring also
updates the selection or clipboard to the current yank, just as M-w
would do so with the text it copies to the kill ring.

+++
*** C-M-% now shows replacement as it would look in the buffer, with
`\N' and `\&' substituted according to the match.  Old behavior can be
restored by customizing `query-replace-show-replacement'.

*** The command shell prompts for the default directory, when it is
called with a prefix and the default directory is a remote file name.
This is because some file name handlers (like ange-ftp) are not able to
run processes remotely.

*** The new command kill-matching-buffers kills buffers whose name
matches a regexp.

*** The new commands `pp-macroexpand-expression' and
`pp-macroexpand-last-sexp' pretty-print macro expansions.


* New Modes and Packages in Emacs 23.1

** FIXME add details of new packages imported from lisp/gnus.
[Maybe some information from doc/misc/gnus-coding.texi can be reused]

** Auto Composition Mode is a minor mode that composes characters
automatically when they are displayed.  It is globally on by default.
It uses `auto-composition-function' (default `auto-compose-chars').

** Bubbles, a new game, is similar to SameGame.

** bug-reference.el provides clickable links to bug reports.

** copyright.el provides utilities for updating copyright notices in files.

** dbus.el provides D-Bus language bindings.
D-Bus is an inter-process communication mechanism for applications
residing on the same host.  See the manual for details.

** Doc View Mode allows viewing of PDF, PostScript and DVI documents.
One can also search for a regular expression in the document.  For
details, see the commentary in doc-view.el.

** EasyPG provides an interface to the GNU Privacy Guard (GnuPG).
It includes a GnuPG keyring browser, cryptographic operations on
regions and files, and automatic encryption of *.gpg files.  For
details, see the EasyPG Assistant User's Manual.

** json.el is a library for parsing and generating JSON
(JavaScript Object Notation), a lightweight data-interchange format.

** linum.el is a new minor mode to display line numbers for the
current buffer.

** minibuffer-indicate-depth-mode shows the minibuffer depth in the prompt.

** nXML Mode
This is a new mode for editing XML documents.  It allows a schema to
be associated with the XML document being edited, using Relax NG as
the schema language.  The schema is used to provide two key features:

*** Continuous validation.  nXML validates as you type, highlighting
any invalid parts of your document.

*** Completion.  nXML can assist you in entering an element name,
attribute name or data value by using information about what is
allowed by the schema in that context.

** proced.el provides a Dired-like interface for operating on processes.
Proced makes an Emacs buffer containing a listing of the current
processes (using ps(1)).  You can use the normal Emacs commands to
move around in this buffer, and special Proced commands to operate on
the processes listed.

** Remember Mode is a mode for jotting down things to remember.
Notes can be saved to a Diary file.  For details, see the Remember
Manual.

** RST mode is a major mode for editing ReSTructured-Text files.

** A new `whitespace' package has been installed, and the pre-existing one
renamed to `old-whitespace'.
[FIXME someone explain why this is good, if it is...]

** zeroconf.el offers service discovery and service publishing
interfaces according to the zeroconf specification.  It communicates
with Avahi, a zeroconf implementation, via D-Bus messages on systems
which have installed this software.


* Changes in Specialized Modes and Packages in Emacs 23.1

** Abbrev has been rewritten in Elisp and extended with more flexibility.
*** New functions: abbrev-get, abbrev-put, abbrev-table-get, abbrev-table-put,
    abbrev-table-p, abbrev-insert, abbrev-table-menu.
*** Special hook `abbrev-expand-functions' obsoletes `pre-abbrev-expand-hook'.
*** `make-abbrev-table', `define-abbrev', `define-abbrev-table' all take
    extra arguments for arbitrary properties.
*** New variable `abbrev-minor-mode-table-alist'.
*** `local-abbrev-table' can hold a list of abbrev-tables.
*** Abbrevs have now the following special properties:
    `:count', `:system', `:enable-function', `:case-fixed'.
*** Abbrev-tables have now the following special properties:
    `:parents', `:case-fixed', `:enable-function', `:regexp',
    `abbrev-table-modiff'.

** Apropos
*** `apropos-library' describes the elements defined in a given library.
*** Set `apropos-compact-layout' is you want a more compact (but wider) layout.

** Archive Mode has basic support to browse Rar archives.

** BibTeX mode

*** New command `bibtex-initialize' (re)initializes BibTeX buffers.

*** New `bibtex-entry-format' options `whitespace', `braces', and
`string', disabled by default.

*** New variable `bibtex-cite-matcher-alist' contains rules to
identify cited keys in BibTeX entries, used by `bibtex-find-crossref'.

*** Command `bibtex-url' allows multiple URLs per entry.

** Calendar and diary

+++
*** There is a new date style, `iso', essentially year/month/day.
The variable `european-calendar-style' is obsolete - use `calendar-date-style'.
Similarly, the commands `american-calendar' and `european-calendar'
should be replaced by `calendar-set-date-style'.

+++
*** The calendar namespace has been rationalized.
All functions and variables now begin with a `calendar-', `diary-', or
`holiday-' prefix.  The various calendar systems have secondary
prefixes, eg `calendar-french-'.  The old names you are likely to use
directly still exist, for the time being, as aliases, but please start
using the new names.

*** The whitespace in the calendar layout can be customized.
See the variables:
calendar-left-margin, calendar-intermonth-spacing, calendar-column-width,
calendar-day-header-width, and calendar-day-digit-width.

*** Text (e.g. ISO weeks) can be displayed between the calendar months.
See the variables calendar-intermonth-header and calendar-intermonth-text.

*** The function `holiday-chinese' computes holidays on the Chinese calendar.
It has been used to add items to the list `holiday-oriental-holidays'.

*** `diary-remind' accepts a negative number -DAYS as a shorthand for
the list (1 2 ... DAYS).

** Compile and grep modes

*** The mode-line entry for the *compilation* and *grep* buffer is color coded.
It has different colors for to show that: (a) the command is still
running, (b) successful completion, (c) error.

*** compilation-auto-jump-to-first-error tells `compile' to jump to
the first error encountered during compilations.

** Custom
+++
*** defcustom accepts new keyword arguments, `:safe' and `:risky', which
set a variable's `safe-local-variable' and `risky-local-variable' property.

** Diff mode

*** diff-refine-hunk highlights word-level details of changes in a diff hunk.
It's used automatically as you move through hunks, see
diff-auto-refine.  It is bound to `C-c C-b'.

*** diff-add-change-log-entries-other-window iterates through the diff
buffer and tries to create ChangeLog entries for each change.
It is bound to `C-x 4 A'.

** Fortran
*** The variable `fortran-line-length' can change the fixed-form line-length.

*** In Fortran mode, M-; is now bound to the standard comment-dwim,
rather than fortran-indent-comment.

+++
*** (The increasingly misnamed) F90 mode supports Fortran 2003 syntax.

** Gnus

*** The Gnus package has been updated
There are many news features, bug fixes and improvements; see the file
GNUS-NEWS or the node "No Gnus" in the Gnus manual for details.

*** In Emacs 23, Gnus uses Emacs' new internal coding system `utf-8-emacs' for
saving articles drafts and ~/.newsrc.eld.  These file may not be read
correctly in Emacs 22 and below.  If you want to Gnus across different Emacs
versions, you may set `mm-auto-save-coding-system' to `emacs-mule'.

** Help mode
*** New macro `with-help-window' should set up help windows better
than `with-output-to-temp-buffer' with `print-help-return-message'.
*** New option `help-window-select' permits to customize whether help
window shall be automatically selected when invoking help.
*** New variable `help-window-point-marker' permits to specify new
position of point in help window (for example in `view-lossage').

** Isearch

*** New command `isearch-highlight-regexp' bound to `M-s h r'
in isearch mode runs `highlight-regexp' (`hi-lock-face-buffer')
with the current search string as its regexp argument.

*** New command `isearch-occur' bound to `M-s o' in isearch mode
runs `occur' with the current search string.

*** isearch can now search through multiple ChangeLog files.
When running isearch in a ChangeLog file, if the search fails,
then another C-s tries searching the previous ChangeLog,
if there is one (e.g. go from ChangeLog to ChangeLog.12).

This is enabled if isearch-buffers-multi is non-nil.

*** The part of an isearch that failed to match is highlighted in `isearch-fail'
face.

*** `C-h C-h' in isearch mode displays isearch-specific Help screen,
`C-h b' displays all isearch key bindings, `C-h k' displays the full
documentation of the given isearch key sequence, `C-h m' displays
documentation of isearch mode.  All the rest Help commands exit isearch mode
and execute their global definitions.

*** When started in the minibuffer, Isearch searches in the minibuffer
history.  See `Minibuffer changes', above.

** Python
*** The file etc/emacs.py now supports both Python 2 and 3, meaning
that either version can be used as inferior Python by python.el.

*** Python mode now has `pdbtrack' functionality.  When using pdb to
debug a Python program, pdbtrack notices the pdb prompt and displays
the source file and line that the program is stopped at, much the same
way as gud-mode does for debugging C programs with gdb.

** T-mouse Mode

*** If the gpm mouse server is running and t-mouse-mode is enabled,
Emacs uses a Unix socket in a GNU/Linux console to talk to server,
rather than faking events using the client program mev.  This C level
approach provides mouse highlighting and help echoing in the
minibuffer.

+++
** Tramp

*** New connection methods.
The new methods "plinkx", "plink2", "psftp", "sftp" and "fish" have
been introduced.  There are also new so-called gateway methods
"tunnel" and "socks".

*** Multihop syntax has been removed.
The pseudo-method "multi" has been removed.  Instead of, multi hops
can be specified by the new variable `tramp-default-proxies-alist'.

*** More default settings.
Default values can be set via the variables `tramp-default-user',
`tramp-default-user-alist' and `tramp-default-host'.

*** Connection information is cached.
In order to reduce connection setup, information about used
connections are kept persistent in a file.  The name of this file is
defined in the variable `tramp-persistency-file-name'.

*** Control of remote processes.
Running processes on a remote host can be controlled by settings in
`tramp-remote-path' and `tramp-remote-process-environment'.

*** Success of remote copy is checked.
When the variable `file-precious-flag' is set, the success of a remote
file copy is checked via the file's checksum.

*** Passwords can be read from an authentification file.
Tramp uses the package `auth-source' to read passwords from a file, if
necessary.

** VC

*** VC now supports applying VC operations to a set of files at a time.
This enables VC to work much more effectively with changeset-oriented
version-control systems such as Subversion, GNU Arch, Mercurial, Git
and Bzr.  VC will now pass a multiple-file commit to these systems as
a single changeset.

*** vc-dir is a new command that displays file names and their VC
status.  It allows to apply various VC operations to a file or a
set of files.

*** Clicking on the VC mode-line entry now pops the VC menu.

*** The VC mode-line entry now has a tooltip that explains the VC file status.

*** In VC Annotate mode, for VC systems that support changesets, you can
see the diff for the whole changeset (not only for the current file)
by using the vc-annotate-show-changeset-diff-revision-at-line function.

*** In VC Annotate mode, you can type V to toggle the annotation visibility.

*** In VC Annotate mode, you can type f to show the file revision on
the current line.

*** vc-git supports the "git grep" command.

*** Asynchronous VC commands display [Waiting...] in the mode-line
of the corresponding buffer as long as the asynchronous process is
active.

*** Log entries can be modified using the key "e" in log-view.
For now only CVS, RCS, SCCS and SVN support this functionality.
This is done by the `modify-change-comment' backend function.

*** In log-view-mode, for VC systems that support changesets, you can
see the diff for the whole changeset (not only for the current file)
by typing the D key or using the "Changeset Diff" menu entry.

*** VC Support for Meta-CVS has been removed for lack of maintainer able
to update it to the new VC.

** Miscellaneous

*** In Change Log mode, the new command C-c C-f (change-log-find-file)
finds the file associated with the current log entry.

*** comint-mode uses `start-file-process' now (see Lisp Changes).
If `default-directory' is a remote file name, subprocesses are started
on the corresponding remote system.

*** In Dired, C-x C-q now runs the command wdired-change-to-wdired-mode,
and C-x C-q in wdired-mode exits it with asking a question about
saving changes.

*** Eldoc highlights the function argument under point
with the face `eldoc-highlight-function-argument'.

*** In Etags, the --members option is now the default.
Use --no-members if you want the old default behavior of not tagging
struct members in C, members variables in C++ and variables in PHP.

*** The `gdb' command only works with the graphical interface now.
Use `gud-gdb' if you want the (old) text command mode.

*** goto-address.el provides two new minor modes, goto-address-mode and
goto-address-prog-mode, which buttonize URLS and email addresses.

*** The new command `eshell/info' runs info in an eshell buffer.

*** The new variable `ffap-rfc-directories' specifies a list of local
directories in which `ffap-rfc' will first search for RFCs.

*** hide-ifdef-mode allows shadowing ifdef-blocks instead of hiding them.
See option `hide-ifdef-shadow' and function `hide-ifdef-toggle-shadowing'.

*** `icomplete-prospects-height' now supercedes `icomplete-prospects-length'.

*** Info displays breadcrumbs in the header of the page.
See Info-breadcrumbs-depth to control it.

*** In Log Edit mode,  C-c C-d now shows the diff for the files involved.

*** net-utils has an `iwconfig' command, similar to the existing `ifconfig'.
It is used to configure wireless interfaces.

*** The pcmpl-unix package supports hostname completion for ssh and scp.

*** sgml-electric-tag-pair-mode lets you simultaneously edit matched tag pairs.

*** smerge-refine highlights word-level details of changes in conflict.
It's used automatically as you move through conflicts, see smerge-auto-refine.

*** talk.el has been extended for multiple tty support.

*** A new command `display-time-world' has been added to the Time
package.  It creates a buffer with an updating time display using
several time zones.

*** The appearance of superscript and subscript in TeX is more customizable.
See the documentation of the variables: tex-fontify-script,
tex-font-script-display, tex-suscript-height-ratio, and
tex-suscript-height-minimum.

*** view-remove-frame-by-deleting is now by default t
since users found iconification of view-mode frames distracting.

*** WoMan tries to add locale-specific manual page directories to the
search path.  This can be disabled by setting `woman-locale' to nil.


* Changes in Emacs 23.1 on non-free operating systems

** Case is now considered significant in completion on MS-Windows.
The default value of `completion-ignore-case' is now nil on
MS-Windows, the same as it is for other operating systems.  The
variable doesn't apply to reading a file name -- in that case Emacs
heeds `read-file-name-completion-ignore-case' instead.

---
** IPv6 is supported on MS-Windows.
Emacs now supports IPv6 on Windows XP and later, and earlier versions
of Windows with third party IPv6 stacks installed.  In Emacs 22, IPv6 was
supported on other platforms, but not on Windows due to using the winsock
1.1 header file, even though Emacs was linking to the winsock 2 library.

---
** Busy cursor (hourglass) now displays on MS-Windows.
When Emacs is busy, an hourglass mouse cursor is displayed on Windows.
In Emacs 22 only X supported the busy cursor.

---
** Battery status is available on MS-Windows
Emacs can now display the battery status in the mode-line when enabled with
display-battery-mode or from the Options menu.  More verbose battery
information is also available with the command `battery'.  In Emacs 22
battery status was supported only on GNU/Linux and Mac.

** More keys available on MS-Windows.
Keys normally associated with IMEs, and some exotic keys not normally found
on standard keyboards have been given names so they can be bound to functions
inside Emacs.  If there are keys on your keyboard that have not been exposed
to Emacs in the past, try C-h k to see if they are available now.

Emacs can now bind functions to the extra buttons for media player and
browser control present on some keyboards.  These buttons are disabled
by default, since enabling them prevents their system-wide use when
Emacs has focus.  To enable them, set the variable
w32-pass-multimedia-buttons to nil.  See the doc string of that variable
for the list of extra keys that are available.


* Incompatible Lisp Changes in Emacs 23.1

** Variables cannot be both buffer-local and frame-local any more.

** `functionp' returns nil for special forms.
I.e., it only returns t for objects that can be passed to `funcall'.

** The behavior of map-char-table has changed.  It may call the
specified function with a cons (FROM . TO) as a key if characters in
that range have the same value.

** Process changes
+++
*** The function `dired-call-process' has been removed.
+++
*** The multibyteness of process filters is now determined by the
coding-system used for decoding.  The functions
`process-filter-multibyte-p' and `set-process-filter-multibyte' are
obsolete.

** The variable `byte-compile-warnings' can now be a list starting with `not',
meaning to disable the specified warnings.  The meaning of this list
may therefore be the reverse of what you expect (of course, this is
only an issue if you make use of the new `not' syntax).  Rather than
checking/manipulating elements directly, use the new functions
`byte-compile-warning-enabled-p', `byte-compile-disable-warning', and
`byte-compile-enable-warning.'

** `mode-name' is no longer guaranteed to be a string.
Use `(format-mode-line mode-name)' to ensure a string value.

** Internationalization changes

*** The value of the function `charset-id' is now always 0.

*** The functions `register-char-codings' and `coding-system-spec'
have been removed.

*** The cpXXX coding systems are now supported automatically.
The functions cp-...-codepage, which you had to use in Emacs 22 to
enable support for these coding systems, have been deleted.

*** The following features have been removed.  They were used for
displaying various scripts with specific fonts, and are no longer
needed now that OpenType font support is available:

**** `devanagari' and `devan-util', and all associated devanagari-* and
dev-* functions and variables (formerly used for Devanagari script).

**** `kannada' and `knd-util', and all associated kannada-* and knd-*
functions and variables (formerly used for Kannada script).

**** `malayalam' and `mlm-util', and all associated malayalam-* and
mlm-* functions and variables (formerly used for Malayalam script).

**** `tamil' and `tml-util, and all associated tamil-* and tml-*
functions and variables (formerly used for Tamil script).


* Lisp Changes in Emacs 23.1

+++
** New variable `user-emacs-directory'.
Use this instead of "~/.emacs.d".

** If a local hook function has a non-nil `permanent-local-hook'
property, `kill-all-local-variables' does not remove it from the local
value of the hook variable; it remains even if you change major modes.

** `frame-inherited-parameters' lets new frames inherit parameters from
the selected frame.

** New keymap `input-decode-map' overrides like key-translation-map, but
applies before function-key-map.  Also it is terminal-local contrary to
key-translation-map.  Terminal-specific key-sequences are generally added to
this map rather than to function-key-map now.

** `ignore-errors' is now a standard macro (does not require the CL package).

** `interprogram-paste-function' can now return one string or a list
of strings.  In the latter case, Emacs puts the second and following
strings on the kill ring.

+++
** In `condition-case', a handler can specify "let the debugger run first".
You do this by writing `debug' in the list of conditions to be handled,
like this:

    (condition-case nil
	(foo bar)
      ((debug error) nil))

** clone-indirect-buffer now runs the clone-indirect-buffer-hook.

** `beginning-of-defun-function' now takes one argument, the count
given to `beginning-of-defun'.

+++
** `file-remote-p' has new optional parameters IDENTIFICATION and CONNECTED.
IDENTIFICATION specifies which part of the remote identifier has to be
returned.  With CONNECTED passed non-nil, it is checked whether a
remote connection has been established already.

** The new macro `declare-function' suppresses compiler warnings about
undefined functions.

** Changes to interactive function handling

*** The new interactive spec code ^ says to first call
handle-shift-selection if shift-select-mode is non-nil, before reading
the command arguments.  This is used for shift-selection (see above).

*** Built-in functions can now have an interactive specification that
is not a prompt string.  If the `intspec' parameter of a `DEFUN'
starts with a `(', the string is evaluated as a Lisp form.

*** The interactive-form of a function can be added post-facto via the
`interactive-form' symbol property.  Mostly useful to add complex
interactive forms to subroutines.

** Region changes

*** Commands should use `use-region-p' to test whether there is
an active region that they should operate on.

*** `region-active-p' returns non-nil when Transient Mark mode is
enabled and there is an active region.  This is NOT the best function
to use to test whether a command should operate on the region instead
of the usual behavior -- for that, use `use-region-p'.

*** If a command sets `transient-mark-mode' to (only . OLDVAL), that
means to activate transient-mark-mode temporarily, until the next
unshifted point motion command or mark deactivation.  Afterwards,
reset transient-mark-mode to the value OLDVAL.  The values `only' and
`identity', introduced in Emacs 22, are now deprecated.

** Emacs session information

*** The new variables `before-init-time' and `after-init-time' record the
value of `current-time' before and after Emacs loads the init files.

*** The new function `emacs-uptime' returns the uptime of an Emacs instance.

*** The new function `emacs-init-time' returns the duration of the
Emacs initialization.

** Changes affecting display-buffer

*** New value nil for split-height-threshold inhibits vertical splitting
unless there's no other window.

*** New option split-width-threshold controls horizontal splitting.

*** A window can be split horizontally even when it's not full-width.

*** New option split-window-preferred-function can be set to a function
to override the default splitting mechanism of display-buffer.

** Minibuffer and completion changes
+++
*** A list of default values can be specified for the DEFAULT argument of
functions `read-from-minibuffer', `read-string', `read-command',
`read-variable', `read-buffer', `completing-read'.  Elements of this list
are available for inserting into the minibuffer by typing `M-n'.
For empty input these functions return the first element of this list.

*** minibuffer-local-must-match-filename-map is now named
minibuffer-local-filename-must-match-map.

*** `all-completions' may now return the base size in the last cdr.
Since this means the returned list is not properly nil-terminated, this
is an incompatible change and is thus enabled by the new variable
completion-all-completions-with-base-size.

*** The `require-match' argument to `completing-read' accepts a new value
`confirm-only'.

** Search and replacement changes
+++
*** The regexp form \(?<num>:<regexp>\) specifies the group number explicitly.
+++
*** New function `match-substitute-replacement' returns the result of
`replace-match' without actually using it in the buffer.

*** The new variable `replace-search-function' determines the function
to use for searching in query-replace and replace-string.

*** The new variable `replace-re-search-function' determines the
function to use for searching in `query-replace-regexp',
`replace-regexp', `query-replace-regexp-eval', and
`map-query-replace-regexp'.

*** The variable `inhibit-changing-match-data', if non-nil, prevents
the search and match primitives from changing the match data.

** File handling changes

*** set-file-modes is now interactive and can take the mode value in
symbolic notation thanks to auxiliary functions.

*** If you set find-file-confirm-nonexistent-file to t, then C-x C-f
requires confirmation before opening a non-existent file.

** Process changes
+++
*** The new function `start-file-process' is similar to `start-process',
but obeys file handlers.  The file handler is chosen based on
`default-directory'.  The functions `start-file-process-shell-command'
and `process-file-shell-command' are also new; they call internally
`start-file-process' and `process-file', respectively.

*** The new function `process-lines' executes an external program and
returns its output as a list of lines.

** Character code, representation, and charset changes.

The character code space is now 0x0..0x3FFFFF with no gap.
Characters of code 0x0..0x10FFFF are Unicode characters of the same code points.
Characters of code 0x3FFF80..0x3FFFFF are raw 8-bit bytes.

Generic characters no longer exist.

In buffers and strings, characters are represented by UTF-8 byte
sequences in a multibyte buffer/string.

The concept of a charset has changed.  A single character may belong
to multiple charsets (e.g. a-grave, U+00E0, belongs to charsets
unicode, iso-8859-1, iso-8859-3, etc).

*** The functions `encode-char' and `decode-char' now accept any character sets.

*** The function `define-charset' now accepts a completely different
form of arguments (old-style arguments still work).

*** The value of the function `char-charset' depends on the current
priorities of charsets.

*** The function get-char-code-property now accepts many Unicode base
character properties.  They are `name', `general-category',
`canonical-combining-class', `bidi-class', `decomposition',
`decimal-digit-value', `digit-value', `numeric-value', `mirrored',
`old-name', `iso-10646-comment', `uppercase', `lowercase', and
`titlecase'.

*** The functions `modify-syntax-entry' and `modify-category-entry' now
accept a cons of characters as the first argument, and modify all
entries in that range of characters.

+++
*** `translation-table-for-input' is now obsolete.

*** New functions:

**** `characterp' returns t if and only if the argument is a character.
This replaces `char-valid-p', which is now obsolete.

**** `max-char' returns the maximum character code (currently #x3FFFFF).

**** `define-charset-alias' defines an alias of a charset.

**** `set-charset-priority' sets priorities of charsets.

**** `charset-priority-list' returns a prioritized list of charsets.

**** `unibyte-string' makes a unibyte string from bytes.

**** `define-char-code-property' defines a character code property.

**** `char-code-property-description' returns the description string of
a character code property.

*** New variables:

**** `find-word-boundary-function-table' is a char-table of functions to
search for a word boundary.

**** `char-script-table' is a char-table of script names.

**** `char-width-table' is a char-table of character widths.

**** `print-charset-text-property' controls how to handle `charset' text
property on printing a string.

**** `printable-chars' is a char-table of printable characters.

** Code conversion changes

*** The new function `define-coding-system' should be used to define a
coding system instead of `make-coding-system' (which is now obsolete).

*** The functions `encode-coding-region' and `decode-coding-region'
have an optional 4th argument to specify where the result of
conversion should go.

*** The functions `encode-coding-string' and `decode-coding-string'
have an optional 4th argument specifying a buffer to store the result
of conversion.

*** The functions `set-coding-priority' and `make-coding-system' are obsolete.

*** New functions:

**** `with-coding-priority' executes Lisp code using the specified
coding system priority order.

**** `check-coding-systems-region' checks if the text in the region is
encodable by the specified coding systems.

**** `coding-system-aliases' returns a list of aliases of a coding system.

**** `coding-system-charset-list' returns a list of charsets supported
by a coding system.

**** `coding-system-priority-list' returns a list of coding systems
ordered by their priorities.

**** `set-coding-system-priority' sets priorities of coding systems.

** There is a new input method, Robin, different from Quail.
It has three functionalities:
 i) a simple input method (converts an ASCII sequence into a string).
ii) converts an existing buffer substring into another string
iii) reverse conversion (each character produced by a
robin rule can hold the original ASCII sequence as a char-code-property)

*** The new function `robin-define-package' defines a Robin package.

*** The new function `robin-modify-package' modifies an existing Robin package.

*** The new function `robin-use-package' starts using a Robin package
as an input method.

*** The new function `string-to-unibyte' is like `string-as-unibyte'
but signals an error if STRING contains a non-ASCII, non-eight-bit
character.

** Changes related to the new font backend

Which font backends to use can be specified by the X resource "FontBackend".
For instance, to use both X core fonts and Xft fonts:

Emacs.FontBackend: x,xft

If this resource is not set, Emacs tries to use all font backends
available on your graphic device.

*** New frame parameter `font-backend' specifies a list of
font-backends supported by the frame's graphic device.  On X, they are
currently `x' and `xft'.

*** The function `set-fontset-font' now accepts a script name as the
second argument, and has an optional 5th argument to control how to
set the font.

*** New functions:

**** `fontp' checks if the argument is a font-spec or font-entity.

**** `font-spec' creates a new font-spec object.

**** `font-get' returns a font property value.

**** `font-put' sets a font property value.

**** `font-face-attributes' returns a plist of face attributes set by a font.

**** `list-fonts' returns a list of font-entities matching a font spec.

**** `font-font' returns the font-entity best matching the given font spec.

**** `list-families' returns a list of family names of available fonts.

**** `font-xlfd-name' returns an XLFD name of a given font spec, font
entity, or font object.

**** `clear-font-cache' clears all font caches.

** Changes related to multiple-terminal (multi-tty) support

*** $TERM is now set to `dumb' for subprocesses.  If you want to know the
$TERM inherited by Emacs you will have to look inside initial-environment.

*** $DISPLAY is now dynamically inherited from the frame's `display'.

*** The `window-system' variable is now frame-local.  The new
`initial-window-system' variable contains the `window-system' value
for the first frame.  `window-system' is also now a function that
takes a frame argument.

*** The `keyboard-translate-table' variable and the terminal and
keyboard coding systems are now terminal-local.

*** You can specify a terminal device (`tty' parameter) and a terminal
type (`tty-type' parameter) to `make-terminal-frame'.

*** The function `make-frame-on-display' now works during a tty
session, and `make-frame-on-tty' works during a graphical session.

*** A new data type for terminals with functions: `get-device-terminal',
`terminal-parameters', `terminal-parameter', `set-terminal-parameter'.

*** Function key sequences are now mapped using `local-function-key-map',
a new variable.  This inherits from the global variable function-key-map,
which is not used directly any more.

*** New hooks:

**** `suspend-tty-functions' and `resume-tty-functions' are called
after a tty frame has been suspended or resumed, respectively.  The
functions are called with the terminal id of the frame being
suspended/resumed as a parameter.

**** The special hook `delete-terminal-functions' is called before
deleting a terminal.

*** New functions:

**** `environment'

**** `make-frame-on-tty' creates a new frame on another tty device.

**** `delete-tty'

**** `suspend-tty'

**** `resume-tty'.

*** `initial-environment' holds the environment inherited from Emacs's parent.

** Redisplay changes

*** For underlined characters, the distance between the underline and
the baseline is controlled by a new variable, `underline-minimum-offset'.

*** You can now pass the value of the `invisible' property to
invisible-p to check whether it would cause the text to be invisible.
Convenient when checking invisibility of text with no buffer position
(e.g. in before/after-strings).

*** Non-breaking space is now displayed as whitespace.

*** `clear-image-cache' can be told to flush only images of a specific file.

** Miscellaneous new functions

*** `format-seconds' converts a number of seconds into a readable
string of days, hours, etc.

*** `apply-partially' performs a "curried" application of a function.

*** `read-shell-command' does what its name says, with completion.  It
uses the minibuffer-local-shell-command-map for that.

*** `buffer-swap-text' swaps text between two buffers.  This can be
useful for modes such as tar-mode, archive-mode, RMAIL.

*** `read-color' reads a color name using the minibuffer.

*** `face-all-attributes' returns an alist describing all the basic
attributes of a given face.

*** `window-full-width-p' returns t if a window is as wide as its
frame.

*** `split-string-and-unquote' does (what?)

*** `combine-and-quote-strings' does (what?)

*** `image-refresh' refreshes all images associated with a given image
specification.

*** The two new functions `looking-at-p' and `string-match-p' can do
the same matching as `looking-at' and `string-match' without changing
the match data.

** Miscellaneous new variables

*** `this-command-keys-shift-translated' is non-nil if the key
sequence invoking the current command was found by shift-translation.

*** `window-point-insertion-type' determines the insertion-type of the
marker used for window-point.

*** bookmark provides `bookmark-make-record-function' so special major
modes like Info can teach bookmark.el how to save and restore the
relevant data.

*** `next-error-recenter' specifies how next-error should recenter the
visited source file.  Its value can be a number (for example, 0 for
top line, -1 for bottom line), or nil for no recentering.

*** `fill-forward-paragraph-function' specifies which function the
filling code should use to find paragraph boundaries.

*** `custom-note-var-changed' tells Custom to treat the change in a
certain variable as having been made within Custom.


* New Packages for Lisp Programming in Emacs 23.1

** The new package avl-tree.el deals with the AVL tree data structure.

** The new package check-declare.el verifies the accuracy of
declare-function macros (see Lisp Changes, above).

** find-cmd.el can build `find' commands using lisp syntax.

** The package isearch-multi.el has been added.  It implements a new mode
`isearch-buffers-minor-mode' that allows isearch to search through
multiple buffers.  In this mode a new variable
`isearch-buffers-next-buffer-function' defines the function to call
to get the next buffer to search in the series of multiple buffers.

** The new major mode `special-mode' is intended as a parent for
major modes such as those that set the "'mode-class 'special" property.


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.


Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:

arch-tag: e759449d-88b3-4de4-9900-3a6c3dfa23e2
