# Maintenance productions for the Lisp directory
# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
#   2008  Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

SHELL = /bin/sh

lisp=@srcdir@
VPATH=@srcdir@
srcdir=@srcdir@/..

# You can specify a different executable on the make command line,
# e.g. "make EMACS=../src/emacs ...".

EMACS = ../src/emacs

# Command line flags for Emacs.  This must include --multibyte,
# otherwise some files will not compile.

EMACSOPT = -batch --no-site-file --multibyte

# Extra flags to pass to the byte compiler
BYTE_COMPILE_EXTRA_FLAGS = 
# For example to not display the undefined function warnings you can use this:
# BYTE_COMPILE_EXTRA_FLAGS = --eval '(setq byte-compile-warnings (quote (not unresolved)))'
# The example above is just for developers, it should not be used by default.

SOURCES = *.el COPYING Makefile
lisptagsfiles1 = $(lisp)/[a-zA-Z]*.el
lisptagsfiles2 = $(lisp)/[a-zA-Z]*/[a-zA-Z]*.el
ETAGS = ../lib-src/etags

# Automatically generated autoload files, apart from lisp/loaddefs.el.
# Note this includes only those files that need special rules to
# build; ie it does not need to include things created via
# generated-autoload-file (eg calc/calc-loaddefs.el).
LOADDEFS = $(lisp)/calendar/cal-loaddefs.el \
	$(lisp)/calendar/diary-loaddefs.el \
	$(lisp)/calendar/hol-loaddefs.el \
	$(lisp)/mh-e/mh-loaddefs.el

# Elisp files auto-generated.
AUTOGENEL = loaddefs.el \
	$(LOADDEFS) \
	cus-load.el \
	finder-inf.el \
	subdirs.el \
	calc/calc-loaddefs.el \
	eshell/esh-groups.el

# Files to compile before others during a bootstrap.  This is done to
# speed up the bootstrap process.  The CC files are compiled first
# because CC mode tweaks the compilation process, and requiring
# cc-mode when it is not compiled doesn't work during the
# bootstrapping.

COMPILE_FIRST = \
	$(lisp)/emacs-lisp/byte-opt.el \
	$(lisp)/emacs-lisp/bytecomp.el \
	$(lisp)/subr.el \
	$(lisp)/progmodes/cc-mode.el \
	$(lisp)/progmodes/cc-vars.el

# Value of max-lisp-eval-depth when compiling the files in COMPILE_FIRST.
# During bootstrapping the byte-compiler is run interpreted when compiling
# itself, and uses more stack than usual.
#
COMPILE_FIRST_STACK_DEPTH = 1000

# The actual Emacs command run in the targets below.

emacs = EMACSLOADPATH=$(lisp) LC_ALL=C $(EMACS) $(EMACSOPT)
# Prerequisites for running $(emacs)
emacs-deps = $(lisp)/subdirs.el

# Common command to find subdirectories

setwins=subdirs=`(cd $$wd; find . -type d -print)`; \
	for file in $$subdirs; do \
	   case $$file in */Old | */RCS | */CVS | */CVS/* | */.* | */.*/* | */=* ) ;; \
		*) wins="$$wins $$wd/$$file" ;; \
	   esac; \
        done

# Find all subdirectories except `obsolete'.

setwins_almost=subdirs=`(cd $$wd; find . -type d -print)`; \
	for file in $$subdirs; do \
	   case $$file in */Old | */RCS | */CVS | */CVS/* | */.* | */.*/* | */=* | */obsolete | */term ) ;; \
		*) wins="$$wins $$wd/$$file" ;; \
	   esac; \
        done

doit:

$(lisp)/cus-load.el:
	touch $@
# Note that custom-deps and finder-data depend on autoloads rather
# than on loaddefs.el, so that autoloads does not run in parallel with
# them under "make -j", because that could delete loaddefs.el from
# under their feet.
custom-deps: $(emacs-deps) autoloads $(lisp)/cus-load.el doit
	wd=$(lisp); $(setwins_almost); \
	echo Directories: $$wins; \
	$(emacs) -l cus-dep --eval '(setq generated-custom-dependencies-file "$(lisp)/cus-load.el")' -f custom-make-dependencies $$wins

finder-data: $(emacs-deps) autoloads doit
	wd=$(lisp); $(setwins_almost); \
	echo Directories: $$wins; \
	$(emacs) -l finder --eval '(setq generated-finder-keywords-file "$(lisp)/finder-inf.el")' -f finder-compile-keywords-make-dist $$wins

autoloads: $(emacs-deps) $(LOADDEFS) doit
	wd=$(lisp); $(setwins_almost); \
	echo Directories: $$wins; \
	$(emacs) -l autoload --eval '(setq generated-autoload-file "$(lisp)/loaddefs.el")' -f batch-update-autoloads $$wins

# Note: every rule that runs $(emacs) and is called during bootstrap must
# depend on this.
$(lisp)/subdirs.el:
	$(MAKE) $(MFLAGS) update-subdirs
update-subdirs: doit
	wd=$(lisp); $(setwins); \
	for file in $$wins; do \
	   $(srcdir)/update-subdirs $$file; \
	done;

updates: update-subdirs autoloads finder-data custom-deps

# This is useful after "cvs up".
cvs-update: recompile autoloads finder-data custom-deps

# Update the AUTHORS file.

update-authors:
	$(emacs) -l authors -f batch-update-authors $(srcdir)/etc/AUTHORS $(srcdir)

TAGS: $(lisptagsfiles1) $(lisptagsfiles2)
	els=`echo $(lisptagsfiles1) $(lisptagsfiles2) | sed -e "s,$(lisp)/loaddefs[^ ]*,," -e "s,$(lisp)/ldefs-boot[^ ]*,,"`; \
	${ETAGS} $$els

TAGS-LISP: $(lisptagsfiles1) $(lisptagsfiles2)
	els=`echo $(lisptagsfiles1) $(lisptagsfiles2) | sed -e "s,$(lisp)/loaddefs[^ ]*,," -e "s,$(lisp)/ldefs-boot[^ ]*,,"`; \
	${ETAGS} -o TAGS-LISP $$els

.SUFFIXES: .elc .el

.el.elc: $(emacs-deps)
	-$(emacs)  $(BYTE_COMPILE_EXTRA_FLAGS) -f batch-byte-compile $<

# Compile all Lisp files, but don't recompile those that are up to
# date.  Some files don't actually get compiled because they set the
# local variable no-byte-compile.

# All .elc files are made writable before compilation in case we
# checked out read-only (CVS option -r).  Files MUST be compiled one by
# one.  If we compile several files in a row we can't make sure that
# the compilation environment is clean.  We also set the load-path of
# the Emacs used for compilation to the current directory and its
# subdirectories, to make sure require's and load's in the files being
# compiled find the right files.

# `|| true' below prevents old Bash versions from getting confused
# by an error.
compile: $(emacs-deps) $(LOADDEFS) doit
	find $(lisp) -name "*.elc" -print | xargs chmod +w >/dev/null 2>&1 || true; \
	wd=$(lisp); $(setwins);	\
	els=`echo $$wins | tr ' \011' '\012\012' | \
		sed -e 's|\(.\)$$|\1/|' -e 's|^\./||' -e 's|$$|*.el|'`;	\
	for el in $(COMPILE_FIRST) $$els; do \
	  if test -f $$el; \
	  then \
	    echo Compiling $$el; \
	    $(emacs) $(BYTE_COMPILE_EXTRA_FLAGS) \
		--eval "(setq max-lisp-eval-depth $(COMPILE_FIRST_STACK_DEPTH))" \
		-f batch-byte-compile-if-not-done $$el || exit 1; \
	  fi \
	done

# Compile all Lisp files.  This is like `compile' but compiles files
# unconditionally.  Some files don't actually get compiled because they
# set the local variable no-byte-compile.

compile-always: $(emacs-deps) $(LOADDEFS) doit
	# `|| true' prevents old Bash versions from getting confused
	# by an error.
	find $(lisp) -name "*.elc" -print | xargs chmod +w >/dev/null 2>&1 || true; \
	wd=$(lisp); $(setwins);	\
	els=`echo $$wins | tr ' \011' '\012\012' | \
		sed -e 's|\(.\)$$|\1/|' -e 's|^\./||' -e 's|$$|*.el|'`;	\
	for el in $(COMPILE_FIRST) $$els; do \
	  if test -f $$el; \
	  then \
	    echo Compiling $$el; \
	    $(emacs) $(BYTE_COMPILE_EXTRA_FLAGS) \
		--eval "(setq max-lisp-eval-depth $(COMPILE_FIRST_STACK_DEPTH))" \
		-f batch-byte-compile $$el || exit 1; \
	  fi \
	done

compile-calc:
	for el in `find $(lisp)/calc -name '*.el'`; do \
	  echo Compiling $$el; \
	  $(emacs)  $(BYTE_COMPILE_EXTRA_FLAGS) -f batch-byte-compile $$el || exit 1; \
	done

# Backup compiled Lisp files in elc.tar.gz.  If that file already
# exists, make a backup of it.

backup-compiled-files:
	-mv $(lisp)/elc.tar.gz $(lisp)/elc.tar.gz~
	-tar czf $(lisp)/elc.tar.gz $(lisp)/*.elc $(lisp)/*/*.elc

# Compile Lisp files, but save old compiled files first.

compile-after-backup: backup-compiled-files compile-always

# Recompile all Lisp files which are newer than their .elc files and compile
# new ones.

recompile: doit $(LOADDEFS) $(lisp)/progmodes/cc-mode.elc
	$(emacs) --eval "(batch-byte-recompile-directory 0)" $(lisp)

# CC Mode uses a compile time macro system which causes a compile time
# dependency in cc-mode.elc on the macros in cc-langs.el and the
# version string in cc-defs.el.
$(lisp)/progmodes/cc-mode.elc: \
	$(lisp)/progmodes/cc-mode.el \
	$(lisp)/progmodes/cc-langs.el \
	$(lisp)/progmodes/cc-defs.el
	$(emacs) $(BYTE_COMPILE_EXTRA_FLAGS) -f batch-byte-compile $(lisp)/progmodes/cc-mode.el

# Update MH-E internal autoloads. These are not to be confused with
# the autoloads for the MH-E entry points, which are already in loaddefs.el.
MH_E_DIR = $(lisp)/mh-e
## MH_E_SRC avoids a circular dependency warning for mh-loaddefs.el.
MH_E_SRC = $(MH_E_DIR)/mh-acros.el $(MH_E_DIR)/mh-alias.el    \
	$(MH_E_DIR)/mh-buffers.el  $(MH_E_DIR)/mh-compat.el   \
	$(MH_E_DIR)/mh-comp.el     $(MH_E_DIR)/mh-e.el        \
	$(MH_E_DIR)/mh-folder.el   $(MH_E_DIR)/mh-funcs.el    \
	$(MH_E_DIR)/mh-gnus.el     $(MH_E_DIR)/mh-identity.el \
	$(MH_E_DIR)/mh-inc.el      $(MH_E_DIR)/mh-junk.el     \
	$(MH_E_DIR)/mh-letter.el   $(MH_E_DIR)/mh-limit.el    \
	$(MH_E_DIR)/mh-mime.el     $(MH_E_DIR)/mh-print.el    \
	$(MH_E_DIR)/mh-scan.el     $(MH_E_DIR)/mh-search.el   \
	$(MH_E_DIR)/mh-seq.el      $(MH_E_DIR)/mh-show.el     \
	$(MH_E_DIR)/mh-speed.el    $(MH_E_DIR)/mh-thread.el   \
	$(MH_E_DIR)/mh-tool-bar.el $(MH_E_DIR)/mh-utils.el    \
	$(MH_E_DIR)/mh-xface.el

mh-autoloads: $(MH_E_DIR)/mh-loaddefs.el
$(MH_E_DIR)/mh-loaddefs.el: $(emacs-deps) $(MH_E_SRC)
	$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###mh-autoload\")" \
	   --eval "(setq generated-autoload-file \"$@\")" \
	   --eval "(setq make-backup-files nil)" \
	   -f batch-update-autoloads $(MH_E_DIR)

CAL_DIR = $(lisp)/calendar
## Those files that may contain internal calendar autoload cookies.
## Avoids circular dependency warning for *-loaddefs.el.
CAL_SRC = $(CAL_DIR)/cal-bahai.el $(CAL_DIR)/cal-china.el  \
	$(CAL_DIR)/cal-coptic.el  $(CAL_DIR)/cal-dst.el    \
	$(CAL_DIR)/cal-french.el  $(CAL_DIR)/cal-hebrew.el \
	$(CAL_DIR)/cal-html.el    $(CAL_DIR)/cal-islam.el  \
	$(CAL_DIR)/cal-iso.el     $(CAL_DIR)/cal-julian.el \
	$(CAL_DIR)/cal-mayan.el   $(CAL_DIR)/cal-menu.el   \
	$(CAL_DIR)/cal-move.el    $(CAL_DIR)/cal-persia.el \
	$(CAL_DIR)/cal-tex.el     $(CAL_DIR)/cal-x.el      \
	$(CAL_DIR)/calendar.el    $(CAL_DIR)/diary-lib.el  \
	$(CAL_DIR)/holidays.el    $(CAL_DIR)/lunar.el      \
	$(CAL_DIR)/solar.el

$(CAL_DIR)/cal-loaddefs.el: $(emacs-deps) $(CAL_SRC)
	$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###cal-autoload\")" \
	   --eval "(setq generated-autoload-file \"$@\")" \
	   --eval "(setq make-backup-files nil)" \
	   -f batch-update-autoloads $(CAL_DIR)

$(CAL_DIR)/diary-loaddefs.el: $(emacs-deps) $(CAL_SRC)
	$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###diary-autoload\")" \
	   --eval "(setq generated-autoload-file \"$@\")" \
	   --eval "(setq make-backup-files nil)" \
	   -f batch-update-autoloads $(CAL_DIR)

$(CAL_DIR)/hol-loaddefs.el: $(emacs-deps) $(CAL_SRC)
	$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###holiday-autoload\")" \
	   --eval "(setq generated-autoload-file \"$@\")" \
	   --eval "(setq make-backup-files nil)" \
	   -f batch-update-autoloads $(CAL_DIR)

# Prepare a bootstrap in the lisp subdirectory.
#
# Build loaddefs.el to make sure it's up-to-date.  If it's not, that
# might lead to errors during the bootstrap because something fails to
# autoload as expected.  If there is no emacs binary, then we can't
# build autoloads yet.  In that case we have to use ldefs-boot.el.
# Bootstrap should always work with ldefs-boot.el.  Therefore,
# whenever a new autoload cookie gets added that is necessary during
# bootstrapping, ldefs-boot.el should be updated by overwriting it with
# an up-to-date copy of loaddefs.el that is uncorrupted by
# local changes.  (Because loaddefs.el is an automatically generated
# file, we don't want to store it in the source repository).
#
# The chmod +w is to handle env var CVSREAD=1.  Files named
# are identified by being the value of `generated-autoload-file'.

bootstrap-prepare:
	if test -x $(EMACS); then				\
	  $(MAKE) $(MFLAGS) autoloads;				\
	fi
	chmod +w $(lisp)/ps-print.el $(lisp)/emulation/tpu-edt.el \
	  $(lisp)/emacs-lisp/cl-loaddefs.el

maintainer-clean: distclean bootstrap-clean
	cd $(lisp); rm -f $(AUTOGENEL)

## NB note that this rules assume only one level of subdirs below lisp/.
## If nested subdirs are added, it's probably time to switch to:
## find $(lisp) -name "*.elc" -exec rm -f '{}' ';'
bootstrap-clean:
	cd $(lisp); rm -f *.elc */*.elc

# Generate/update files for the bootstrap process.

bootstrap: update-subdirs autoloads compile

# Generate/update files after the bootstrap process.
# custom-deps needs `preloaded-file-list'.

bootstrap-after: finder-data custom-deps

distclean:
	-rm -f ./Makefile

.PHONY: check-declare

check-declare:
	$(emacs) -l $(lisp)/emacs-lisp/check-declare \
	  --eval '(check-declare-directory "$(lisp)")'

# Makefile ends here.
