@c This is part of the Emacs manual.
@c Copyright (C) 1987,93,94,95,1997,2001 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node X Resources, Antinews, Command Arguments, Top
@appendix X Options and Resources

  You can customize some X-related aspects of Emacs behavior using X
resources, as is usual for programs that use X.  X resources are the
only way to customize tooltip windows and LessTif menus, since the
libraries that implement them don't provide for customization through
Emacs.  This appendix describes the X resources that Emacs recognizes
and how to use them.

@menu
* Resources::           Using X resources with Emacs (in general).
* Table of Resources::  Table of specific X resources that affect Emacs.
* Face Resources::      X resources for customizing faces.
* Lucid Resources::     X resources for Lucid menus.
* LessTif Resources::   X resources for LessTif and Motif menus.
@end menu

@node Resources
@appendixsec X Resources
@cindex resources

@cindex X resources, @file{~/.Xdefaults} file
  Programs running under the X Window System organize their user
options under a hierarchy of classes and resources.  You can specify
default values for these options in your X resources file, usually
named @file{~/.Xdefaults}.  If changes in @file{~/.Xdefaults} do not
take effect, it is because your X server stores its own list of
resources; to update them, use the shell command @command{xrdb}---for
instance, @samp{xrdb ~/.Xdefaults}.

  Each line in the file specifies a value for one option or for a
collection of related options, for one program or for several programs
(optionally even for all programs).

@cindex Registry (MS-Windows)
@cindex @file{.Xdefaults} file, and MS-Windows
  MS-Windows systems don't support @file{~/.Xdefaults} files, but
Emacs compiled for Windows looks for X resources in the Windows
Registry, under the keys @samp{HKEY_CURRENT_USER\SOFTWARE\GNU\Emacs}
and @samp{HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs}.

  Programs define named resources with particular meanings.  They also
define how to group resources into named classes.  For instance, in
Emacs, the @samp{internalBorder} resource controls the width of the
internal border, and the @samp{borderWidth} resource controls the width
of the external border.  Both of these resources are part of the
@samp{BorderWidth} class.  Case distinctions are significant in these
names.

  In @file{~/.Xdefaults}, you can specify a value for a single resource
on one line, like this:

@example
emacs.borderWidth: 2
@end example

@noindent
Or you can use a class name to specify the same value for all resources
in that class.  Here's an example:

@example
emacs.BorderWidth: 2
@end example

  If you specify a value for a class, it becomes the default for all
resources in that class.  You can specify values for individual
resources as well; these override the class value, for those particular
resources.  Thus, this example specifies 2 as the default width for all
borders, but overrides this value with 4 for the external border:

@example
emacs.BorderWidth: 2
emacs.borderWidth: 4
@end example

  The order in which the lines appear in the file does not matter.
Also, command-line options always override the X resources file.

  The string @samp{emacs} in the examples above is also a resource
name.  It actually represents the name of the executable file that you
invoke to run Emacs.  If Emacs is installed under a different name, it
looks for resources under that name instead of @samp{emacs}.

@table @samp
@item -name @var{name}
@opindex --name
@itemx --name=@var{name}
@cindex resource name, command-line argument
Use @var{name} as the resource name (and the title) for the initial
Emacs frame.  This option does not affect subsequent frames, but Lisp
programs can specify frame names when they create frames.

If you don't specify this option, the default is to use the Emacs
executable's name as the resource name.

@item -xrm @var{resource-values}
@opindex --xrm
@itemx --xrm=@var{resource-values}
@cindex resource values, command-line argument
Specify X resource values for this Emacs job (see below).
@end table

  For consistency, @samp{-name} also specifies the name to use for
other resource values that do not belong to any particular frame.

  The resources that name Emacs invocations also belong to a class; its
name is @samp{Emacs}.  If you write @samp{Emacs} instead of
@samp{emacs}, the resource applies to all frames in all Emacs jobs,
regardless of frame titles and regardless of the name of the executable
file.  Here is an example:

@example
Emacs.BorderWidth: 2
Emacs.borderWidth: 4
@end example

  You can specify a string of additional resource values for Emacs to
use with the command line option @samp{-xrm @var{resources}}.  The text
@var{resources} should have the same format that you would use inside a file
of X resources.  To include multiple resource specifications in
@var{resources}, put a newline between them, just as you would in a file.
You can also use @samp{#include "@var{filename}"} to include a file full
of resource specifications.  Resource values specified with @samp{-xrm}
take precedence over all other resource specifications.

  One way to experiment with the effect of different resource settings
is to use the @code{editres} program.  Select @samp{Get Tree} from the
@samp{Commands} menu, then click on an Emacs frame.  This will display
a tree showing the structure of X toolkit widgets used in an Emacs
frame.  Select one of them, such as @samp{menubar}, then select
@samp{Show Resource Box} from the @samp{Commands} menu.  This displays
a list of all the meaningful X resources and allows you to edit them.
Changes take effect immediately if you click on the @samp{Apply} button.

@node Table of Resources
@appendixsec Table of X Resources for Emacs

  This table lists the resource names that designate options for
Emacs, not counting those for the appearance of the menu bar, each
with the class that it belongs to:

@table @asis
@item @code{background} (class @code{Background})
Background color name.

@item @code{bitmapIcon} (class @code{BitmapIcon})
Use a bitmap icon (a picture of a gnu) if @samp{on}, let the window
manager choose an icon if @samp{off}.

@item @code{borderColor} (class @code{BorderColor})
Color name for the external border.

@item @code{borderWidth} (class @code{BorderWidth})
Width in pixels of the external border.

@item @code{cursorColor} (class @code{Foreground})
Color name for text cursor (point).

@item @code{font} (class @code{Font})
Font name for text (or fontset name, @pxref{Fontsets}).

@item @code{foreground} (class @code{Foreground})
Color name for text.

@item @code{geometry} (class @code{Geometry})
Window size and position.  Be careful not to specify this resource as
@samp{emacs*geometry}, because that may affect individual menus as well
as the Emacs frame itself.

If this resource specifies a position, that position applies only to the
initial Emacs frame (or, in the case of a resource for a specific frame
name, only that frame).  However, the size, if specified here, applies to
all frames.

@item @code{fullscreen} (class @code{Fullscreen})
The desired fullscreen size.  The value can be one of @code{fullboth},
@code{fullwidth} or @code{fullheight}, which correspond to
the command-line options @samp{-fs}, @samp{-fw}, and @samp{-fh}
(@pxref{Window Size X}).

Note that this applies to all frames created, not just the initial
one.

@item @code{iconName} (class @code{Title})
Name to display in the icon.

@item @code{internalBorder} (class @code{BorderWidth})
Width in pixels of the internal border.

@item @code{lineSpacing} (class @code{LineSpacing})
@cindex line spacing
@cindex leading
Additional space (@dfn{leading}) between lines, in pixels.

@item @code{menuBar} (class @code{MenuBar})
Give frames menu bars if @samp{on}; don't have menu bars if
@samp{off}.  @xref{Lucid Resources}, and @ref{LessTif Resources}, for
how to control the appearance of the menu bar if you have one.

@item @code{toolBar} (class @code{ToolBar})
Number of lines to reserve for the tool bar.  A zero value suppresses
the tool bar.  If the value is non-zero and
@code{auto-resize-tool-bars} is non-@code{nil}, the tool bar's size
will be changed automatically so that all tool bar items are visible.

@item @code{minibuffer} (class @code{Minibuffer})
If @samp{none}, don't make a minibuffer in this frame.
It will use a separate minibuffer frame instead.

@item @code{paneFont} (class @code{Font})
@cindex font for menus
Font name for menu pane titles, in non-toolkit versions of Emacs.

@item @code{pointerColor} (class @code{Foreground})
Color of the mouse cursor.

@ignore
@item @code{privateColormap} (class @code{PrivateColormap})
If @samp{on}, use a private color map, in the case where the ``default
visual'' of class PseudoColor and Emacs is using it.
@end ignore

@item @code{reverseVideo} (class @code{ReverseVideo})
Switch foreground and background default colors if @samp{on}, use colors as
specified if @samp{off}.

@item @code{screenGamma} (class @code{ScreenGamma})
@cindex gamma correction
Gamma correction for colors, equivalent to the frame parameter
@code{screen-gamma}.

@item @code{selectionFont} (class @code{Font})
Font name for pop-up menu items, in non-toolkit versions of Emacs.  (For
toolkit versions, see @ref{Lucid Resources}, also see @ref{LessTif
Resources}.)

@item @code{synchronous} (class @code{Synchronous})
@cindex debugging X problems
@cindex synchronous X mode
Run Emacs in synchronous mode if @samp{on}.  Synchronous mode is
useful for debugging X problems.

@item @code{title} (class @code{Title})
Name to display in the title bar of the initial Emacs frame.

@item @code{useXIM} (class @code{UseXIM})
@cindex XIM
@cindex X input methods
Turn off use of X input methods (XIM) if @samp{false} or @samp{off}.
This is only relevant if your Emacs is actually built with XIM
support.  It is potentially useful to turn off XIM for efficiency,
especially slow X client/server links.

@item @code{verticalScrollBars} (class @code{ScrollBars})
Give frames scroll bars if @samp{on}; don't have scroll bars if
@samp{off}.
@end table

@node Face Resources
@appendixsec X Resources for Faces

  You can also use resources to customize the appearance of particular
faces (@pxref{Faces}):

@table @code
@item @var{face}.attributeFont
Font for face @var{face}.
@item @var{face}.attributeForeground
Foreground color for face @var{face}.
@item @var{face}.attributeBackground
Background color for face @var{face}.
@item @var{face}.attributeUnderline
Underline flag for face @var{face}.  Use @samp{on} or @samp{true} for
yes.
@item @var{face}.attributeFamily
Font family for face @var{face}.
@item @var{face}.attributeWidth
Relative proportional width of the font to use for face @var{face}.
It should be one of @code{ultra-condensed}, @code{extra-condensed},
@code{condensed}, @code{semi-condensed}, @code{normal},
@code{semi-expanded}, @code{expanded}, @code{extra-expanded}, or
@code{ultra-expanded}.
@item @var{face}.attributeHeight
Height of the font to use for face @var{face}: either an integer
specifying the height in units of 1/10@dmn{pt}, or a floating point
number that specifies a scale factor to scale the underlying face's
default font, or a function to be called with the default height which
will return a new height.
@item @var{face}.attributeWeight
A weight to use for the face @var{face}.  It must be one of
@code{ultra-bold}, @code{extra-bold}, @code{bold},
@code{semi-bold}, @code{normal}, @code{semi-light}, @code{light},
@code{extra-light}, @code{ultra-light}.
@item @var{face}.attributeSlant
The slant to use for the font of face @var{face}.  It must be one of
@code{italic}, @code{oblique}, @code{normal},
@code{reverse-italic}, or @code{reverse-oblique}.
@item @var{face}.attributeStrikeThrough
Whether the face @var{face} should be drawn with a line striking
through the characters.
@item @var{face}.attributeOverline
Whether the characters in the face @var{face} should be overlined.
@item @var{face}.attributeBox
Whether to draw a box around the characters in face @var{face}.
@item @var{face}.attributeInverse
Whether to display the characters in face @var{face} in inverse
video.
@item @var{face}.attributeStipple
The name of a pixmap data file to use for the stipple pattern, or
@code{false} to not use stipple for the face @var{face}.
@item @var{face}.attributeBackgroundPixmap
The background pixmap for the face @var{face}.  Should be a name of a
pixmap file or @code{false}.
@item @var{face}.attributeBold
Whether to draw the characters in the face @var{face} as bold.
@item @var{face}.attributeItalic
Whether to draw the characters in the face @var{face} as italic.
@end table

@node Lucid Resources
@appendixsec Lucid Menu X Resources
@cindex Menu X Resources (Lucid widgets)
@cindex Lucid Widget X Resources

  If the Emacs installed at your site was built to use the X toolkit
with the Lucid menu widgets, then the menu bar is a separate widget and
has its own resources.  The resource names contain @samp{pane.menubar}
(following, as always, the name of the Emacs invocation, or @samp{Emacs},
which stands for all Emacs invocations).  Specify them like this:

@example
Emacs.pane.menubar.@var{resource}:  @var{value}
@end example

@noindent
For example, to specify the font @samp{8x16} for the menu-bar items,
write this:

@example
Emacs.pane.menubar.font:  8x16
@end example

@noindent
Resources for @emph{non-menubar} toolkit pop-up menus have
@samp{menu*}, in like fashion.  For example, to specify the font
@samp{8x16} for the pop-up menu items, write this:

@example
Emacs.menu*.font:	8x16
@end example

@noindent
For dialog boxes, use @samp{dialog} instead of @samp{menu}:

@example
Emacs.dialog*.font:	8x16
@end example

@noindent
Experience shows that on some systems you may need to add
@samp{shell.}@: before the @samp{pane.menubar} or @samp{menu*}.  On
some other systems, you must not add @samp{shell.}.

  Here is a list of the specific resources for menu bars and pop-up menus:

@table @code
@item font
Font for menu item text.
@item foreground
Color of the foreground.
@item background
Color of the background.
@item buttonForeground
In the menu bar, the color of the foreground for a selected item.
@item horizontalSpacing
Horizontal spacing in pixels between items.  Default is 3.
@item verticalSpacing
Vertical spacing in pixels between items.  Default is 1.
@item arrowSpacing
Horizontal spacing between the arrow (which indicates a submenu) and
the associated text.  Default is 10.
@item shadowThickness
Thickness of shadow line around the widget.
@item margin
The margin of the menu bar, in characters.  The default of 4 makes the
menu bar appear like the LessTif/Motif one.
@end table

@node LessTif Resources
@appendixsec LessTif Menu X Resources
@cindex Menu X Resources (LessTif widgets)
@cindex LessTif Widget X Resources

  If the Emacs installed at your site was built to use the X toolkit
with the LessTif or Motif widgets, then the menu bar, the dialog
boxes, the pop-up menus, and the file-selection box are separate
widgets and have their own resources.

  The resource names for the menu bar contain @samp{pane.menubar}
(following, as always, the name of the Emacs invocation, or
@samp{Emacs}, which stands for all Emacs invocations).  Specify them
like this:

@smallexample
Emacs.pane.menubar.@var{subwidget}.@var{resource}:  @var{value}
@end smallexample

  Each individual string in the menu bar is a subwidget; the subwidget's
name is the same as the menu item string.  For example, the word
@samp{File} in the menu bar is part of a subwidget named
@samp{emacs.pane.menubar.File}.  Most likely, you want to specify the
same resources for the whole menu bar.  To do this, use @samp{*} instead
of a specific subwidget name.  For example, to specify the font
@samp{8x16} for the menu-bar items, write this:

@smallexample
Emacs.pane.menubar.*.fontList:  8x16
@end smallexample

@noindent
This also specifies the resource value for submenus.

  Each item in a submenu in the menu bar also has its own name for X
resources; for example, the @samp{File} submenu has an item named
@samp{Save (current buffer)}.  A resource specification for a submenu
item looks like this:

@smallexample
Emacs.pane.menubar.popup_*.@var{menu}.@var{item}.@var{resource}: @var{value}
@end smallexample

@noindent
For example, here's how to specify the font for the @samp{Save (current
buffer)} item:

@smallexample
Emacs.pane.menubar.popup_*.File.Save (current buffer).fontList: 8x16
@end smallexample

@noindent
For an item in a second-level submenu, such as @samp{Complete Word}
under @samp{Spell Checking} under @samp{Tools}, the resource fits this
template:

@smallexample
Emacs.pane.menubar.popup_*.popup_*.@var{menu}.@var{resource}: @var{value}
@end smallexample

@noindent
For example,

@smallexample
Emacs.pane.menubar.popup_*.popup_*.Spell Checking.Complete Word: @var{value}
@end smallexample

@noindent
(This should be one long line.)
  
  It's impossible to specify a resource for all the menu-bar items
without also specifying it for the submenus as well.  So if you want the
submenu items to look different from the menu bar itself, you must ask
for that in two steps.  First, specify the resource for all of them;
then, override the value for submenus alone.  Here is an example:

@smallexample
Emacs.pane.menubar.*.fontList:  8x16
Emacs.pane.menubar.popup_*.fontList: 8x16
@end smallexample

@noindent
For LessTif pop-up menus, use @samp{menu*} instead of
@samp{pane.menubar}.  For example, to specify the font @samp{8x16} for
the pop-up menu items, write this:

@smallexample
Emacs.menu*.fontList:  8x16
@end smallexample

@noindent
For LessTif dialog boxes, use @samp{dialog} instead of @samp{menu}:

@example
Emacs.dialog*.fontList: 8x16
Emacs.dialog*.foreground: hotpink
@end example

To specify resources for the LessTif file-selection box, use
@samp{fsb*}, like this:

@example
Emacs.fsb*.fontList: 8x16
@end example

@iftex
@medbreak
@end iftex
  Here is a list of the specific resources for LessTif menu bars and
pop-up menus:

@table @code
@item armColor
The color to show in an armed button.
@item fontList
The font to use.
@item marginBottom
@itemx marginHeight
@itemx marginLeft
@itemx marginRight
@itemx marginTop
@itemx marginWidth
Amount of space to leave around the item, within the border.
@item borderWidth
The width of the border around the menu item, on all sides.
@item shadowThickness
The width of the border shadow.
@item bottomShadowColor
The color for the border shadow, on the bottom and the right.
@item topShadowColor
The color for the border shadow, on the top and the left.
@end table
