#! /usr/bin/perl

# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
#   Free Software Foundation, Inc.
#
# This file is part of GNU Emacs.
#
# GNU Emacs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Emacs; see the file COPYING.  If not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

use File::Basename;

if (@ARGV < 3)
{
  print <<USAGE;
revdiff FILE OLD NEW

Get a diff of FILE between revisions OLD and NEW.  Store the
diff in a file named FILE-OLD-NEW.diff.

If OLD is `-' use FILE's current revision for OLD.  If OLD is
`-<number>', use the Nth revision before the current one for OLD.

If NEW is +<number> or -<number>, build diffs between revisions OLD
and OLD +/- <number>.

Examples:

revdiff FILE - -1      get the latest change of FILE
revdiff FILE -1 +1     also gets the latest change of FILE
revdiff FILE 1.500 +2  get diffs 1.500-1.501 and 1.501-1.502.

USAGE
  exit 1;
}

$file = shift @ARGV;
$old  = shift @ARGV;

sub diffit
{
  my ($old, $new) = @_;
  print "cvs diff -r$old -r$new $file >$file-$old-$new.diff\n";
  system "cvs diff -r$old -r$new $file >$file-$old-$new.diff";
}

sub current_revision ($)
{
  my ($file) = @_;
  my $dir = dirname ($file);
  my $base = basename ($file);
  my $entries = "$dir/CVS/Entries";
  die "Can't find $entries" unless -f $entries;
  open (IN, "<$entries") or die "Cannot open $entries";
  my $rev;
  while ($line = <IN>)
    {
      if ($line =~ m,/$base/([^/]+),)
	{
	  $rev = $1;
	  break;
	}
    }
  die "Cannot determine current revision of $file" unless $rev;
  close (IN);
  return $rev;
}

if ($old eq "-")
  {
    $old = current_revision ($file);
  }
elsif ($old =~ /^-(\d+)$/)
  {
    my $offset = $1;
    $old = current_revision ($file);
    die "Internal error" unless $old =~ /(.*)\.(\d+)$/;
    my $minor = $2 - $offset;
    $old = sprintf ("%d.%d", $1, $minor);
  }

while (@ARGV)
  {
    my $new = shift @ARGV;
    if ($new =~ /^[+]\d+$/)
      {
	my $n = $new;
	for ($i = 0; $i < $n; ++$i)
	  {
	    unless ($old =~ /(.*)\.(\d+)$/)
	      {
		die "Internal error";
	      }
	    my $j = $2 + 1;
	    $new = "$1.$j";
	    diffit ($old, $new);
	    $old = $new;
	  }
      }
    elsif ($new =~ /^[-]\d+$/)
      {
	my $n = - $new;
	for ($i = 0; $i < $n; ++$i)
	  {
	    unless ($old =~ /(.*)\.(\d+)$/)
	      {
		die "Internal error";
	      }
	    my $j = $2 - 1;
	    $new = "$1.$j";
	    diffit ($new, $old);
	    $old = $new;
	  }
      }
    else
      {
	diffit ($old, $new);
	$old = $new;
      }
  }

# Local Variables:
# mode: cperl
# End:

# arch-tag: 2798b20d-c7f2-4c78-8378-7bb529c36a09
